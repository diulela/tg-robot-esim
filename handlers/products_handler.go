package handlers

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"tg-robot-sim/pkg/sdk/esim"
	"tg-robot-sim/services"
)

// ProductsHandler ÂïÜÂìÅÂàóË°®Â§ÑÁêÜÂô®
type ProductsHandler struct {
	bot         *tgbotapi.BotAPI
	esimService services.EsimService
	logger      Logger
}

// NewProductsHandler ÂàõÂª∫ÂïÜÂìÅÂ§ÑÁêÜÂô®
func NewProductsHandler(bot *tgbotapi.BotAPI, esimService services.EsimService, logger Logger) *ProductsHandler {
	return &ProductsHandler{
		bot:         bot,
		esimService: esimService,
		logger:      logger,
	}
}

// HandleCallback Â§ÑÁêÜÂõûË∞ÉÊü•ËØ¢
func (h *ProductsHandler) HandleCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) error {
	data := callback.Data
	userID := callback.From.ID

	h.logger.Debug("Products handler processing callback: %s", data)

	// ÂõûÁ≠îÂõûË∞É
	if err := h.answerCallback(callback.ID); err != nil {
		h.logger.Error("Failed to answer callback: %v", err)
	}

	// Ëß£ÊûêÂõûË∞ÉÊï∞ÊçÆ
	parts := strings.Split(data, ":")
	action := parts[0]

	switch action {
	case "products_local":
		return h.showProducts(ctx, callback.Message, esim.ProductTypeLocal, 1)
	case "products_regional":
		return h.showProducts(ctx, callback.Message, esim.ProductTypeRegional, 1)
	case "products_global":
		return h.showProducts(ctx, callback.Message, esim.ProductTypeGlobal, 1)
	case "products_page":
		if len(parts) >= 3 {
			productType := esim.ProductType(parts[1])
			page, _ := strconv.Atoi(parts[2])
			return h.showProducts(ctx, callback.Message, productType, page)
		}
	case "product_detail":
		if len(parts) >= 2 {
			productID, _ := strconv.Atoi(parts[1])
			return h.showProductDetail(ctx, callback.Message, productID)
		}
	case "product_buy":
		if len(parts) >= 2 {
			productID, _ := strconv.Atoi(parts[1])
			return h.startPurchase(ctx, callback.Message, userID, productID)
		}
	case "products_back":
		return h.showMainMenu(callback.Message)
	}

	return nil
}

// CanHandle Âà§Êñ≠ÊòØÂê¶ËÉΩÂ§ÑÁêÜËØ•ÂõûË∞É
func (h *ProductsHandler) CanHandle(callback *tgbotapi.CallbackQuery) bool {
	return strings.HasPrefix(callback.Data, "products_") ||
		strings.HasPrefix(callback.Data, "product_")
}

// GetHandlerName Ëé∑ÂèñÂ§ÑÁêÜÂô®ÂêçÁß∞
func (h *ProductsHandler) GetHandlerName() string {
	return "products"
}

// HandleCommand Â§ÑÁêÜÂëΩ‰ª§
func (h *ProductsHandler) HandleCommand(ctx context.Context, message *tgbotapi.Message) error {
	// Ëß£ÊûêÂëΩ‰ª§ÂèÇÊï∞ÔºàÂõΩÂÆ∂‰ª£Á†ÅÔºâ
	args := strings.TrimSpace(strings.TrimPrefix(message.Text, "/products"))

	if args == "" {
		// Ê≤°ÊúâÂèÇÊï∞ÔºåÊòæÁ§∫‰∫ßÂìÅÁ±ªÂûãÈÄâÊã©ËèúÂçï
		return h.showProductTypeMenu(message.Chat.ID)
	}

	// ÊúâÂèÇÊï∞ÔºåÊåâÂõΩÂÆ∂‰ª£Á†ÅÊêúÁ¥¢
	countryCode := strings.ToUpper(args)
	return h.searchProductsByCountry(ctx, message.Chat.ID, countryCode)
}

// GetCommand Ëé∑ÂèñÂ§ÑÁêÜÁöÑÂëΩ‰ª§ÂêçÁß∞
func (h *ProductsHandler) GetCommand() string {
	return "products"
}

// GetDescription Ëé∑ÂèñÂëΩ‰ª§ÊèèËø∞
func (h *ProductsHandler) GetDescription() string {
	return "ÊµèËßà eSIM ‰∫ßÂìÅ"
}

// showProductTypeMenu ÊòæÁ§∫‰∫ßÂìÅÁ±ªÂûãÈÄâÊã©ËèúÂçï
func (h *ProductsHandler) showProductTypeMenu(chatID int64) error {
	text := "üì± *eSIM ‰∫ßÂìÅÂïÜÂüé*\n\n"
	text += "ËØ∑ÈÄâÊã©‰∫ßÂìÅÁ±ªÂûãÔºö\n\n"
	text += "üè† *Êú¨Âú∞* - Âçï‰∏™ÂõΩÂÆ∂‰ΩøÁî®\n"
	text += "üåè *Âå∫Âüü* - Â§ö‰∏™ÂõΩÂÆ∂‰ΩøÁî®\n"
	text += "üåç *ÂÖ®ÁêÉ* - ÂÖ®ÁêÉÈÄöÁî®\n\n"
	text += "üí° ÊèêÁ§∫ÔºöÊÇ®‰πüÂèØ‰ª•‰ΩøÁî® `/products ÂõΩÂÆ∂‰ª£Á†Å` ÊêúÁ¥¢ÁâπÂÆöÂõΩÂÆ∂ÁöÑ‰∫ßÂìÅ"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† Êú¨Âú∞‰∫ßÂìÅ", "products_local"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåè Âå∫Âüü‰∫ßÂìÅ", "products_regional"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåç ÂÖ®ÁêÉ‰∫ßÂìÅ", "products_global"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô ËøîÂõû‰∏ªËèúÂçï", "main_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	_, err := h.bot.Send(msg)
	return err
}

// showProducts ÊòæÁ§∫‰∫ßÂìÅÂàóË°®
func (h *ProductsHandler) showProducts(ctx context.Context, message *tgbotapi.Message, productType esim.ProductType, page int) error {
	// Ëé∑Âèñ‰∫ßÂìÅÂàóË°®
	resp, err := h.esimService.GetProducts(ctx, &esim.ProductParams{
		Type:  productType,
		Page:  page,
		Limit: 5,
	})

	if err != nil {
		h.logger.Error("Failed to get products: %v", err)
		return h.sendError(message.Chat.ID, "Ëé∑Âèñ‰∫ßÂìÅÂàóË°®Â§±Ë¥•")
	}

	if !resp.Success || len(resp.Message.Products) == 0 {
		return h.sendError(message.Chat.ID, "ÊöÇÊó†‰∫ßÂìÅ")
	}

	// ÊûÑÂª∫Ê∂àÊÅØÊñáÊú¨
	text := h.buildProductListText(productType, resp.Message.Products, resp.Message.Pagination)

	// ÊûÑÂª∫ÈîÆÁõò
	keyboard := h.buildProductListKeyboard(resp.Message.Products, productType, resp.Message.Pagination)

	// ÁºñËæëÊàñÂèëÈÄÅÊ∂àÊÅØ
	return h.editOrSendMessage(message, text, keyboard)
}

// buildProductListText ÊûÑÂª∫‰∫ßÂìÅÂàóË°®ÊñáÊú¨
func (h *ProductsHandler) buildProductListText(productType esim.ProductType, products []esim.Product, pagination esim.Pagination) string {
	typeText := map[esim.ProductType]string{
		esim.ProductTypeLocal:    "üè† Êú¨Âú∞‰∫ßÂìÅ",
		esim.ProductTypeRegional: "üåè Âå∫Âüü‰∫ßÂìÅ",
		esim.ProductTypeGlobal:   "üåç ÂÖ®ÁêÉ‰∫ßÂìÅ",
	}

	text := fmt.Sprintf("*%s*\n\n", typeText[productType])
	text += fmt.Sprintf("üìÑ Á¨¨ %d/%d È°µ (ÂÖ± %d ‰∏™‰∫ßÂìÅ)\n\n",
		pagination.Page, pagination.TotalPages, pagination.Total)

	for i, product := range products {
		text += fmt.Sprintf("*%d. %s*\n", i+1, product.Name)

		// ÂõΩÂÆ∂‰ø°ÊÅØ
		if len(product.Countries) > 0 {
			countries := make([]string, 0, 3)
			for j, country := range product.Countries {
				if j >= 3 {
					countries = append(countries, fmt.Sprintf("Á≠â%dÂõΩ", len(product.Countries)))
					break
				}
				countries = append(countries, country.CN)
			}
			text += fmt.Sprintf("   üó∫Ô∏è %s\n", strings.Join(countries, ", "))
		}

		text += fmt.Sprintf("   üìä %s | ‚è∞ %dÂ§©\n",
			formatDataSize(product.DataSize), product.ValidDays)
		text += fmt.Sprintf("   üí∞ $%.2f | üíµ $%.2f\n\n",
			product.RetailPrice, product.AgentPrice)
	}

	return text
}

// buildProductListKeyboard ÊûÑÂª∫‰∫ßÂìÅÂàóË°®ÈîÆÁõò
func (h *ProductsHandler) buildProductListKeyboard(products []esim.Product, productType esim.ProductType, pagination esim.Pagination) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// ‰∫ßÂìÅÊåâÈíÆ
	for i, product := range products {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%d. Êü•ÁúãËØ¶ÊÉÖ", i+1),
			fmt.Sprintf("product_detail:%d", product.ID),
		)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	// ÂàÜÈ°µÊåâÈíÆ
	if pagination.TotalPages > 1 {
		var pageRow []tgbotapi.InlineKeyboardButton

		if pagination.Page > 1 {
			pageRow = append(pageRow, tgbotapi.NewInlineKeyboardButtonData(
				"‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ",
				fmt.Sprintf("products_page:%s:%d", productType, pagination.Page-1),
			))
		}

		pageRow = append(pageRow, tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%d/%d", pagination.Page, pagination.TotalPages),
			"noop",
		))

		if pagination.Page < pagination.TotalPages {
			pageRow = append(pageRow, tgbotapi.NewInlineKeyboardButtonData(
				"‚û°Ô∏è ‰∏ã‰∏ÄÈ°µ",
				fmt.Sprintf("products_page:%s:%d", productType, pagination.Page+1),
			))
		}

		rows = append(rows, pageRow)
	}

	// ËøîÂõûÊåâÈíÆ
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô ËøîÂõû", "products_back"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// showProductDetail ÊòæÁ§∫‰∫ßÂìÅËØ¶ÊÉÖ
func (h *ProductsHandler) showProductDetail(ctx context.Context, message *tgbotapi.Message, productID int) error {
	resp, err := h.esimService.GetProduct(ctx, productID)
	if err != nil {
		h.logger.Error("Failed to get product detail: %v", err)
		return h.sendError(message.Chat.ID, "Ëé∑Âèñ‰∫ßÂìÅËØ¶ÊÉÖÂ§±Ë¥•")
	}

	if !resp.Success {
		return h.sendError(message.Chat.ID, "‰∫ßÂìÅ‰∏çÂ≠òÂú®")
	}

	product := resp.Data
	text := services.FormatProductMessage(&product)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üõí Á´ãÂç≥Ë¥≠‰π∞", fmt.Sprintf("product_buy:%d", productID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô ËøîÂõûÂàóË°®", fmt.Sprintf("products_%s", product.Type)),
		),
	)

	return h.editOrSendMessage(message, text, keyboard)
}

// searchProductsByCountry ÊåâÂõΩÂÆ∂‰ª£Á†ÅÊêúÁ¥¢‰∫ßÂìÅ
func (h *ProductsHandler) searchProductsByCountry(ctx context.Context, chatID int64, countryCode string) error {
	resp, err := h.esimService.GetProducts(ctx, &esim.ProductParams{
		Country: countryCode,
		Limit:   10,
	})

	if err != nil {
		h.logger.Error("Failed to search products: %v", err)
		return h.sendError(chatID, "ÊêúÁ¥¢‰∫ßÂìÅÂ§±Ë¥•")
	}

	if !resp.Success || len(resp.Message.Products) == 0 {
		text := fmt.Sprintf("Êú™ÊâæÂà∞ÂõΩÂÆ∂‰ª£Á†Å *%s* ÁöÑ‰∫ßÂìÅ\n\n", countryCode)
		text += "ËØ∑Ê£ÄÊü•ÂõΩÂÆ∂‰ª£Á†ÅÊòØÂê¶Ê≠£Á°ÆÔºåÊàñ‰ΩøÁî® /products ÊµèËßàÊâÄÊúâ‰∫ßÂìÅ"

		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "Markdown"
		_, err := h.bot.Send(msg)
		return err
	}

	text := fmt.Sprintf("üîç *ÊêúÁ¥¢ÁªìÊûú: %s*\n\n", countryCode)
	text += fmt.Sprintf("ÊâæÂà∞ %d ‰∏™‰∫ßÂìÅ\n\n", len(resp.Message.Products))

	for i, product := range resp.Message.Products {
		text += fmt.Sprintf("*%d. %s*\n", i+1, product.Name)
		text += fmt.Sprintf("   üìä %s | ‚è∞ %dÂ§©\n",
			formatDataSize(product.DataSize), product.ValidDays)
		text += fmt.Sprintf("   üí∞ $%.2f | üíµ $%.2f\n\n",
			product.RetailPrice, product.AgentPrice)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for i, product := range resp.Message.Products {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%d. Êü•ÁúãËØ¶ÊÉÖ", i+1),
			fmt.Sprintf("product_detail:%d", product.ID),
		)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	_, err = h.bot.Send(msg)
	return err
}

// startPurchase ÂºÄÂßãË¥≠‰π∞ÊµÅÁ®ã
func (h *ProductsHandler) startPurchase(ctx context.Context, message *tgbotapi.Message, userID int64, productID int) error {
	text := "üõí *ÂºÄÂßãË¥≠‰π∞ÊµÅÁ®ã*\n\n"
	text += "ËØ∑Êèê‰æõ‰ª•‰∏ã‰ø°ÊÅØÔºö\n"
	text += "1. ÂÆ¢Êà∑ÈÇÆÁÆ±Âú∞ÂùÄÔºàÂøÖÂ°´Ôºâ\n"
	text += "2. ÂÆ¢Êà∑ÊâãÊú∫Âè∑ÔºàÂèØÈÄâÔºâ\n"
	text += "3. Ë¥≠‰π∞Êï∞ÈáèÔºàÈªòËÆ§1Ôºâ\n\n"
	text += "ËØ∑Êåâ‰ª•‰∏ãÊ†ºÂºèÂèëÈÄÅÔºö\n"
	text += "`customer@example.com`\n"
	text += "Êàñ\n"
	text += "`customer@example.com,+86 138 0000 0000,2`"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå ÂèñÊ∂à", fmt.Sprintf("product_detail:%d", productID)),
		),
	)

	return h.editOrSendMessage(message, text, keyboard)
}

// Helper functions

func (h *ProductsHandler) editOrSendMessage(message *tgbotapi.Message, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	editMsg := tgbotapi.NewEditMessageText(message.Chat.ID, message.MessageID, text)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	_, err := h.bot.Send(editMsg)

	// ÂøΩÁï• "message is not modified" ÈîôËØØ
	if err != nil && strings.Contains(err.Error(), "message is not modified") {
		h.logger.Debug("Message content unchanged, skipping edit")
		return nil
	}

	return err
}

func (h *ProductsHandler) sendError(chatID int64, errorMsg string) error {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg)
	_, err := h.bot.Send(msg)
	return err
}

func (h *ProductsHandler) answerCallback(callbackID string) error {
	callback := tgbotapi.NewCallback(callbackID, "")
	_, err := h.bot.Request(callback)
	return err
}

func (h *ProductsHandler) showMainMenu(message *tgbotapi.Message) error {
	text := "üì± <b>‰∏ªËèúÂçï</b>\n\nËØ∑ÈÄâÊã©ÊÇ®ÈúÄË¶ÅÁöÑÂäüËÉΩÔºö"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üõçÔ∏è ÊµèËßà‰∫ßÂìÅ", "products_back"),
			tgbotapi.NewInlineKeyboardButtonData("üì¶ ÊàëÁöÑËÆ¢Âçï", "my_orders"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ Èí±ÂåÖÁÆ°ÁêÜ", "wallet_menu"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è ËÆæÁΩÆ", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è Â∏ÆÂä©", "help"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(message.Chat.ID, message.MessageID, text)
	editMsg.ParseMode = "HTML"
	editMsg.ReplyMarkup = &keyboard

	_, err := h.bot.Send(editMsg)
	return err
}

func formatDataSize(sizeMB int) string {
	if sizeMB >= 1024 {
		return fmt.Sprintf("%.1fGB", float64(sizeMB)/1024)
	}
	return fmt.Sprintf("%dMB", sizeMB)
}
